// Code generated by mockery v2.9.4. DO NOT EDIT.

package state

import (
	"gitdc.ee.guardtime.com/alphabill/alphabill/internal/state/tree"
	uint256 "github.com/holiman/uint256"
	mock "github.com/stretchr/testify/mock"
)

// MockRevertibleState is an autogenerated mock type for the RevertibleState type
type MockRevertibleState struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: id, owner, data
func (_m *MockRevertibleState) AddItem(id *uint256.Int, owner tree.Predicate, data tree.Data) error {
	ret := _m.Called(id, owner, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, tree.Predicate, tree.Data) error); ok {
		r0 = rf(id, owner, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockRevertibleState) Commit() {
	_m.Called()
}

// DeleteItem provides a mock function with given fields: id
func (_m *MockRevertibleState) DeleteItem(id *uint256.Int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Revert provides a mock function with given fields:
func (_m *MockRevertibleState) Revert() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOwner provides a mock function with given fields: id, owner
func (_m *MockRevertibleState) SetOwner(id *uint256.Int, owner tree.Predicate) error {
	ret := _m.Called(id, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, tree.Predicate) error); ok {
		r0 = rf(id, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateData provides a mock function with given fields: id, f
func (_m *MockRevertibleState) UpdateData(id *uint256.Int, f UpdateFunction) error {
	ret := _m.Called(id, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, UpdateFunction) error); ok {
		r0 = rf(id, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
