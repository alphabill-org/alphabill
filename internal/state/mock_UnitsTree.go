// Code generated by mockery v2.9.4. DO NOT EDIT.

package state

import (
	"gitdc.ee.guardtime.com/alphabill/alphabill/internal/state/tree"
	uint256 "github.com/holiman/uint256"
	mock "github.com/stretchr/testify/mock"
)

// MockUnitsTree is an autogenerated mock type for the UnitsTree type
type MockUnitsTree struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockUnitsTree) Delete(id *uint256.Int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: id
func (_m *MockUnitsTree) Exists(id *uint256.Int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*uint256.Int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uint256.Int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *MockUnitsTree) Get(id *uint256.Int) (tree.Predicate, tree.Data, error) {
	ret := _m.Called(id)

	var r0 tree.Predicate
	if rf, ok := ret.Get(0).(func(*uint256.Int) tree.Predicate); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tree.Predicate)
		}
	}

	var r1 tree.Data
	if rf, ok := ret.Get(1).(func(*uint256.Int) tree.Data); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(tree.Data)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*uint256.Int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRootHash provides a mock function with given fields:
func (_m *MockUnitsTree) GetRootHash() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetSummaryValue provides a mock function with given fields:
func (_m *MockUnitsTree) GetSummaryValue() tree.SummaryValue {
	ret := _m.Called()

	var r0 tree.SummaryValue
	if rf, ok := ret.Get(0).(func() tree.SummaryValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tree.SummaryValue)
		}
	}

	return r0
}

// Set provides a mock function with given fields: id, owner, data
func (_m *MockUnitsTree) Set(id *uint256.Int, owner tree.Predicate, data tree.Data) error {
	ret := _m.Called(id, owner, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, tree.Predicate, tree.Data) error); ok {
		r0 = rf(id, owner, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetData provides a mock function with given fields: id, data
func (_m *MockUnitsTree) SetData(id *uint256.Int, data tree.Data) error {
	ret := _m.Called(id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, tree.Data) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOwner provides a mock function with given fields: id, owner
func (_m *MockUnitsTree) SetOwner(id *uint256.Int, owner tree.Predicate) error {
	ret := _m.Called(id, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, tree.Predicate) error); ok {
		r0 = rf(id, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
