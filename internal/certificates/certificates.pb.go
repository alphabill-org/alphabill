// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: certificates.proto

package certificates

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UnicityCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputRecord            *InputRecord            `protobuf:"bytes,1,opt,name=input_record,json=inputRecord,proto3" json:"input_record,omitempty"`
	UnicityTreeCertificate *UnicityTreeCertificate `protobuf:"bytes,2,opt,name=unicity_tree_certificate,json=unicityTreeCertificate,proto3" json:"unicity_tree_certificate,omitempty"`
	UnicitySeal            *UnicitySeal            `protobuf:"bytes,3,opt,name=unicity_seal,json=unicitySeal,proto3" json:"unicity_seal,omitempty"`
}

func (x *UnicityCertificate) Reset() {
	*x = UnicityCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnicityCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnicityCertificate) ProtoMessage() {}

func (x *UnicityCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnicityCertificate.ProtoReflect.Descriptor instead.
func (*UnicityCertificate) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{0}
}

func (x *UnicityCertificate) GetInputRecord() *InputRecord {
	if x != nil {
		return x.InputRecord
	}
	return nil
}

func (x *UnicityCertificate) GetUnicityTreeCertificate() *UnicityTreeCertificate {
	if x != nil {
		return x.UnicityTreeCertificate
	}
	return nil
}

func (x *UnicityCertificate) GetUnicitySeal() *UnicitySeal {
	if x != nil {
		return x.UnicitySeal
	}
	return nil
}

type InputRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// previously certified state hash
	PreviousHash []byte `protobuf:"bytes,1,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	// state hash to be certified
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// hash of the block
	BlockHash []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// summary value to certified
	SummaryValue []byte `protobuf:"bytes,4,opt,name=summary_value,json=summaryValue,proto3" json:"summary_value,omitempty"`
	// transaction system's round number
	RoundNumber uint64 `protobuf:"varint,5,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	// sum of the actual fees over all transaction records in the block
	SumOfEarnedFees uint64 `protobuf:"varint,6,opt,name=sum_of_earned_fees,json=sumOfEarnedFees,proto3" json:"sum_of_earned_fees,omitempty"`
}

func (x *InputRecord) Reset() {
	*x = InputRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputRecord) ProtoMessage() {}

func (x *InputRecord) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputRecord.ProtoReflect.Descriptor instead.
func (*InputRecord) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{1}
}

func (x *InputRecord) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *InputRecord) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *InputRecord) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *InputRecord) GetSummaryValue() []byte {
	if x != nil {
		return x.SummaryValue
	}
	return nil
}

func (x *InputRecord) GetRoundNumber() uint64 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *InputRecord) GetSumOfEarnedFees() uint64 {
	if x != nil {
		return x.SumOfEarnedFees
	}
	return 0
}

type UnicityTreeCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemIdentifier      []byte   `protobuf:"bytes,1,opt,name=system_identifier,json=systemIdentifier,proto3" json:"system_identifier,omitempty"`
	SiblingHashes         [][]byte `protobuf:"bytes,2,rep,name=sibling_hashes,json=siblingHashes,proto3" json:"sibling_hashes,omitempty"`
	SystemDescriptionHash []byte   `protobuf:"bytes,3,opt,name=system_description_hash,json=systemDescriptionHash,proto3" json:"system_description_hash,omitempty"`
}

func (x *UnicityTreeCertificate) Reset() {
	*x = UnicityTreeCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnicityTreeCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnicityTreeCertificate) ProtoMessage() {}

func (x *UnicityTreeCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnicityTreeCertificate.ProtoReflect.Descriptor instead.
func (*UnicityTreeCertificate) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{2}
}

func (x *UnicityTreeCertificate) GetSystemIdentifier() []byte {
	if x != nil {
		return x.SystemIdentifier
	}
	return nil
}

func (x *UnicityTreeCertificate) GetSiblingHashes() [][]byte {
	if x != nil {
		return x.SiblingHashes
	}
	return nil
}

func (x *UnicityTreeCertificate) GetSystemDescriptionHash() []byte {
	if x != nil {
		return x.SystemDescriptionHash
	}
	return nil
}

type UnicitySeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootChainRoundNumber uint64            `protobuf:"varint,1,opt,name=root_chain_round_number,json=rootChainRoundNumber,proto3" json:"root_chain_round_number,omitempty"`
	PreviousHash         []byte            `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	Hash                 []byte            `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Signatures           map[string][]byte `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnicitySeal) Reset() {
	*x = UnicitySeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnicitySeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnicitySeal) ProtoMessage() {}

func (x *UnicitySeal) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnicitySeal.ProtoReflect.Descriptor instead.
func (*UnicitySeal) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{3}
}

func (x *UnicitySeal) GetRootChainRoundNumber() uint64 {
	if x != nil {
		return x.RootChainRoundNumber
	}
	return 0
}

func (x *UnicitySeal) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *UnicitySeal) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *UnicitySeal) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

var File_certificates_proto protoreflect.FileDescriptor

var file_certificates_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x51, 0x0a, 0x18,
	0x75, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x55, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x54, 0x72, 0x65, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x16, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x54, 0x72, 0x65, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x61, 0x6c, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x53, 0x65, 0x61, 0x6c,
	0x22, 0xda, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x12, 0x73, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x75,
	0x6d, 0x4f, 0x66, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x73, 0x22, 0xa4, 0x01,
	0x0a, 0x16, 0x55, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x54, 0x72, 0x65, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x3b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_certificates_proto_rawDescOnce sync.Once
	file_certificates_proto_rawDescData = file_certificates_proto_rawDesc
)

func file_certificates_proto_rawDescGZIP() []byte {
	file_certificates_proto_rawDescOnce.Do(func() {
		file_certificates_proto_rawDescData = protoimpl.X.CompressGZIP(file_certificates_proto_rawDescData)
	})
	return file_certificates_proto_rawDescData
}

var file_certificates_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_certificates_proto_goTypes = []interface{}{
	(*UnicityCertificate)(nil),     // 0: UnicityCertificate
	(*InputRecord)(nil),            // 1: InputRecord
	(*UnicityTreeCertificate)(nil), // 2: UnicityTreeCertificate
	(*UnicitySeal)(nil),            // 3: UnicitySeal
	nil,                            // 4: UnicitySeal.SignaturesEntry
}
var file_certificates_proto_depIdxs = []int32{
	1, // 0: UnicityCertificate.input_record:type_name -> InputRecord
	2, // 1: UnicityCertificate.unicity_tree_certificate:type_name -> UnicityTreeCertificate
	3, // 2: UnicityCertificate.unicity_seal:type_name -> UnicitySeal
	4, // 3: UnicitySeal.signatures:type_name -> UnicitySeal.SignaturesEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_certificates_proto_init() }
func file_certificates_proto_init() {
	if File_certificates_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_certificates_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnicityCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certificates_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certificates_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnicityTreeCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certificates_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnicitySeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_certificates_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_certificates_proto_goTypes,
		DependencyIndexes: file_certificates_proto_depIdxs,
		MessageInfos:      file_certificates_proto_msgTypes,
	}.Build()
	File_certificates_proto = out.File
	file_certificates_proto_rawDesc = nil
	file_certificates_proto_goTypes = nil
	file_certificates_proto_depIdxs = nil
}
