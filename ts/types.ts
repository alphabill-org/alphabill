// Code generated by tygo. DO NOT EDIT.

//////////
// source: block.go

export interface Block {
  Header?: Header;
  Transactions: (TransactionRecord | undefined)[];
  UnicityCertificate?: UnicityCertificate;
}
export interface Header {
  SystemID: SystemID;
  ShardID: string;
  ProposerID: string;
  PreviousBlockHash: string;
}

//////////
// source: identifiers.go

export const SystemIdentifierLength = 4;
export type SystemID = string;
export type SystemID32 = number /* uint32 */;
export type UnitID = string;

//////////
// source: input_record.go

export interface InputRecord {
  previous_hash?: string; // previously certified state hash
  hash?: string; // state hash to be certified
  block_hash?: string; // hash of the block
  summary_value?: string; // summary value to certified
  round_number?: number /* uint64 */; // transaction system's round number
  sum_of_earned_fees?: number /* uint64 */; // sum of the actual fees over all transaction records in the block
}

//////////
// source: tx_order.go

export interface TransactionOrder {
  Payload?: Payload;
  OwnerProof: string;
  FeeProof: string;
}
export interface Payload {
  SystemID: SystemID;
  Type: string;
  UnitID: UnitID;
  Attributes: RawCBOR;
  ClientMetadata?: ClientMetadata;
}
export interface ClientMetadata {
  Timeout: number /* uint64 */;
  MaxTransactionFee: number /* uint64 */;
  FeeCreditRecordID: string;
}
export type RawCBOR = string;
export type SigBytesProvider = any;

//////////
// source: tx_proof.go

/**
 * TxProof is a transaction execution proof.
 */
export interface TxProof {
  BlockHeaderHash: string;
  Chain: (GenericChainItem | undefined)[];
  UnicityCertificate?: UnicityCertificate;
}
export interface GenericChainItem {
  Hash: string;
  Left: boolean;
}

//////////
// source: tx_record.go

/**
 * TxStatusFailed is the status code of a transaction if execution failed.
 */
export const TxStatusFailed: TxStatus = 0;
/**
 * TxStatusSuccessful is the status code of a transaction if execution succeeded.
 */
export const TxStatusSuccessful: TxStatus = 1;
export type TxStatus = number /* uint64 */;
/**
 * TransactionRecord is a transaction order with "server-side" metadata added to it. TransactionRecord is a structure
 * that is added to the block.
 */
export interface TransactionRecord {
  TransactionOrder?: TransactionOrder;
  ServerMetadata?: ServerMetadata;
}
export interface ServerMetadata {
  ActualFee: number /* uint64 */;
  TargetUnits: UnitID[];
  SuccessIndicator: TxStatus;
  ProcessingDetails: RawCBOR;
}

//////////
// source: unicity_certificate.go

export interface UnicityCertificate {
  input_record?: InputRecord;
  unicity_tree_certificate?: UnicityTreeCertificate;
  unicity_seal?: UnicitySeal;
}

//////////
// source: unicity_seal.go

/**
 * GenesisTime min timestamp Thursday, April 20, 2023 6:11:24 AM GMT+00:00
 * Epoch (or Unix time or POSIX time or Unix timestamp) is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT)
 */
export const GenesisTime: number /* uint64 */ = 1681971084;
export type SignatureMap = { [key: string]: string};
export interface UnicitySeal {
  root_chain_round_number?: number /* uint64 */;
  timestamp?: number /* uint64 */;
  previous_hash?: string;
  hash?: string;
  signatures?: SignatureMap;
}
/**
 * Signatures are serialized as alphabetically sorted CBOR array
 */

//////////
// source: unicity_tree_certificate.go

export interface UnicityTreeCertificate {
  system_identifier?: SystemID;
  sibling_hashes?: string[];
  system_description_hash?: string;
}

//////////
// source: unit_proof.go

export interface UnitStateProof {
  UnitID: UnitID;
  PreviousStateHash: string;
  UnitTreeCert?: UnitTreeCert;
  DataSummary: number /* uint64 */;
  StateTreeCert?: StateTreeCert;
  UnicityCertificate?: UnicityCertificate;
}
export interface UnitTreeCert {
  TransactionRecordHash: string; // t
  UnitDataHash: string; // s
  Path: (any /* mt.PathItem */ | undefined)[];
}
export interface StateTreeCert {
  LeftHash: string;
  LeftSummaryValue: number /* uint64 */;
  RightHash: string;
  RightSummaryValue: number /* uint64 */;
  Path: (StateTreePathItem | undefined)[];
}
export interface StateTreePathItem {
  ID: UnitID; // (ι′)
  Hash: string; // (z)
  NodeSummaryInput: number /* uint64 */; // (V)
  SiblingHash: string;
  SubTreeSummaryValue: number /* uint64 */;
}
export interface StateUnitData {
  Data: any /* cbor.RawMessage */;
  Bearer: any /* predicates.PredicateBytes */;
}
export interface UnitDataAndProof {
  UnitData?: StateUnitData;
  Proof?: UnitStateProof;
}
export type UnicityCertificateValidator = any;
