openapi: 3.1.0
info:
  title: Tokens Partition Indexing Backend API
  description: |-
    Tokens partition indexing backend processes blocks from the tokens
    partition and indexes token types, tokens and fee credit
    balances. This API provides access to the indexed data.
  version: '1.0'
servers:
  - url: /api/v1
  - url: https://dev-ab-tokens-backend.abdev1.guardtime.com/api/v1
  - url: http://localhost:{port}/api/v1
    variables:
      port:
        default: '9735'
paths:
  /round-number:
    get:
      summary: Get the latest round number of the tokens partition
      description: |-
        Returns the round number of the latest certified round known
        to the partition node which indexing backend is connected
        to. Useful for calculating transaction timeout values.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "components.yaml#/schemas/RoundNumberResponse"
        '500':
          $ref: 'components.yaml#/responses/ErrorResponse'
  /types/{typeId}/hierarchy:
    get:
      summary: Get token type and all of its ancestors
      description: |-
        Returns the description of a token type together with its ancestors for a given type ID.
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UnitIDParam'
      responses:
        '200':
          description: token type with given ID was found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenType'
        '404':
          description: either token type with given ID does not exist or failed to load one of the ancestors
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/schemas/ErrorResponse'
        default:
          $ref: 'components.yaml#/responses/ErrorResponse'
  /kinds/{kind}/types:
    get:
      summary: Find token types
      description: |-
        Returns token types of the given kind and optionally filtered
        by creator. Supports paging with the offsetKey and limit
        parameters.
      parameters:
        - name: kind
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Kind'
        - name: creator
          description: Public key of the creator of the token type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PublicKeyParam'
        - name: offsetKey
          description: When doing batched queries, offset key returned by the previous query
          in: query
          required: false
          schema:
            type: string
        - name: limit
          description: Maximum number of items in the response
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          headers:
            Link:
              schema:
                type: string
              description: link to next batch
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenType'
        '400':
          $ref: 'components.yaml#/responses/ErrorResponse'
        '500':
          $ref: 'components.yaml#/responses/ErrorResponse'
  /tokens/{tokenId}:
    get:
      summary: Get token by ID
      parameters:
        - name: tokenId
          in: path
          required: true
          description: |-
            Hex encoded string of the token ID which starts with `0x`.
            Must be 66 characters long (including 0x prefix).
          schema:
            $ref: '#/components/schemas/UnitIDParam'
      responses:
        '200':
          description: Token with given ID was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '404':
          description: no token with given id
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/schemas/ErrorResponse'
        default:
          $ref: 'components.yaml#/responses/ErrorResponse'
  /kinds/{kind}/owners/{owner}/tokens:
    get:
      summary: Find tokens by token kind and owner
      description: |-
        Returns tokens of the given kind and owner. Supports paging
        with the offsetKey and limit parameters.
      parameters:
        - name: kind
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Kind'
        - name: owner
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PublicKeyParam'
        - name: offsetKey
          description: when doing batched queries, offset key returned by the previous query
          in: query
          required: false
          schema:
            type: string
        - name: limit
          description: maximum number of items response may contain
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '400':
          $ref: 'components.yaml#/responses/ErrorResponse'
        '500':
          $ref: 'components.yaml#/responses/ErrorResponse'
  /units/{unitId}/transactions/{txHash}/proof:
    get:
      summary: Get transaction proof by unit ID and transaction hash
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UnitIDParam'
        - name: txHash
          in: path
          required: true
          schema:
            type: string
            default: 0x
      responses:
        '200':
          description: transaction proof was found
          content:
            application/json:
              schema:
                # TODO
        '404':
          description: transaction is not in the index
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/schemas/ErrorResponse'
        default:
          $ref: 'components.yaml#/responses/ErrorResponse'
  /events/{pubkey}/subscribe:
    get:
      summary: Subscribe to server-sent events (SSE) stream
      description: |-
        Allows to get events about transactions assosiated with the given public key.

        Events are generetaed only for token transactions as token types do not have
        "owner" info attached to them (so we do not know to which subscribers to send
        events). Only successful transactions (these added to the block) will
        generate events and one transaction can produce multiple events (ie split
        transaction will produce two events - one for the original token and one for
        the new one).

        For the token unit transaction event will have:
         - event: token
         - data: JSON of the [`Token`](#/components/schemas/Token) structure.
      parameters:
        - name: pubkey
          in: path
          required: true
          description: identifies the "owner" of the transactions about which events are
          schema:
            $ref: '#/components/schemas/PublicKeyParam'
      responses:
        '200':
          description: successful operation
        default:
          $ref: 'components.yaml#/responses/ErrorResponse'
  /fee-credit-bills/{unitId}:
    get:
      summary: Get fee credit bill by unit ID
      description: |-
        Returns fee credit bill for the given unit ID.
      parameters:
        - name: unitId
          in: path
          required: true
          description: fee credit unit id (SHA256 hash of private key) in hex format
          schema:
            $ref: '#/components/schemas/UnitIDParam'
      responses:
        '200':
          description: fee credit bill returned
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: 'components.yaml#/schemas/Bill'
        '404':
          description: fee credit bill was not found for given bill id
          content:
            application/json:
              schema:
                $ref: 'components.yaml#/schemas/ErrorResponse'
        default:
          $ref: 'components.yaml#/responses/ErrorResponse'
  /transactions/{pubkey}:
    post:
      summary: Forward transactions to partition node
      description: |-
        Allows to send raw CBOR encoded transactions to partition node.
      parameters:
        - name: pubkey
          in: path
          required: true
          description: sender public key prefixed with 0x
          schema:
            $ref: '#/components/schemas/PublicKeyParam'
      requestBody:
        description: CBOR encoded array of TransactionOrders
        content:
          application/cbor: {}
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          $ref: 'components.yaml#/responses/ErrorResponse'
        '500':
          description: |-
            Server failed to process the request, either some of the
            transactions posted were invalid or the server itself has
            problems, ie can't connect to the AB node.

            Response is a map with transaction ID as the key and error
            message as the value. The error message describes what
            went wrong when trying to process that
            transaction. Transactions which are not listed might have
            been processed successfuly.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  ZD75s0+XCi3XwxOp3UxccXY6nM4ZhDnDyYNGoJv5K1U=: "failed to convert transaction: bad type name"
                  v8aSJW4nDxgQf7VxvNh/a60ux7CovgAuJUwJJIJNvAk=: "failed to forward tx: connection refused"
components:
  schemas:
    Kind:
      type: string
      description: token kind name, used in queries as a parameter value.
      default: all
      enum:
        - all
        - nft
        - fungible
    KindInt:
      type: integer
      description: |-
        Representation of Kind type as integer, used by responses:
         - 2 = fungible
         - 4 = nft
      enum:
        - 2
        - 4
    TokenTypeID:
      type: string
      format: byte
      nullable: false
      example: I+v1+3MrmBCoSuk1zlff0loozI9BHc8fqVb3WGeQrC4=
    PublicKeyParam:
      type: string
      description: |-
        Hex encoded string of the public key, prefixed by `0x`.
        Must be 68 characters long (including 0x prefix).
        
        This type is used for query input parameters.
      minLength: 68
      maxLength: 68
      # default: 0x
    UnitIDParam:
      type: string
      description: |-
        Unit ID is a 32 byte binary value encoded as hex string, prefixed by `0x` marker.
        So the valid string representation of the value must be 66 characters long (including 0x prefix).
        
        This type is used for query input parameters like token ID or token type ID.
      minLength: 66
      maxLength: 66
      # default: 0x
      example: '0x3a04762909373b3c273ff3726746d7a787836d767733dabc2773619870c081a3'
    TxHash:
      type: string
      format: byte
      example: ux5oRDOUCKFCb06vuDOcGPspoBxTYOq9G97mzPAdQxc=
    Predicate:
      type: string
      format: byte
      example: U1EB
    TokenType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TokenTypeID'
        parentTypeId:
          allOf:
            - $ref: '#/components/schemas/TokenTypeID'
            - nullable: true
            - example: AA==
        symbol:
          type: string
          example: foo bar
        name:
          type: string
          example: A name for the token type
        icon:
          $ref: '#/components/schemas/Icon'
        subTypeCreationPredicate:
          $ref: '#/components/schemas/Predicate'
        tokenCreationPredicate:
          $ref: '#/components/schemas/Predicate'
        invariantPredicate:
          $ref: '#/components/schemas/Predicate'
        kind:
          $ref: '#/components/schemas/KindInt'
        decimalPlaces:
          type: integer
          format: int32
          minimum: 0
          maximum: 8
          description: only when "kind" is "fungible"
        nftDataUpdatePredicate:
          allOf:
            - $ref: '#/components/schemas/Predicate'
            - description: only when "kind" is "nft"
        txHash:
          $ref: '#/components/schemas/TxHash'
    Token:
      type: object
      properties:
        id:
          type: string
          format: byte
        typeId:
          $ref: '#/components/schemas/TokenTypeID'
        symbol:
          type: string
        owner:
          $ref: '#/components/schemas/Predicate'
        kind:
          $ref: '#/components/schemas/KindInt'
        amount:
          type: string
          description: uint64 value encoded as string
          example: "1000"
        decimals:
          type: integer
          format: int32
          minimum: 0
          maximum: 8
          description: only when "kind" is "fungible"
        nftName:
          type: string
        nftUri:
          type: string
          description: only when "kind" is "nft"
        nftData:
          type: string
          format: byte
          description: only when "kind" is "nft"
        nftDataUpdatePredicate:
          allOf:
            - $ref: '#/components/schemas/Predicate'
            - description: only when "kind" is "nft"
        txHash:
          $ref: '#/components/schemas/TxHash'
    Icon:
      type: object
      properties:
        type:
          type: string
          example: image/png
        data:
          type: string
          format: binary
          example: base64encodeddata
