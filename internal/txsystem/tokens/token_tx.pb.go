// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: token_tx.proto

package tokens

import (
	block "github.com/alphabill-org/alphabill/internal/block"
	txsystem "github.com/alphabill-org/alphabill/internal/txsystem"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateNonFungibleTokenTypeAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is the symbol (short name) of this token type, up to 32 characters in the UTF-8 encoding; note that the symbols are not guaranteed to be unique;
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// identifies the parent type that this type derives from; 0 indicates there is no parent type;
	ParentTypeId []byte `protobuf:"bytes,2,opt,name=parent_type_id,json=parentTypeId,proto3" json:"parent_type_id,omitempty"`
	// the predicate clause that controls defining new sub-types of this type;
	SubTypeCreationPredicate []byte `protobuf:"bytes,3,opt,name=sub_type_creation_predicate,json=subTypeCreationPredicate,proto3" json:"sub_type_creation_predicate,omitempty"`
	// the predicate clause that controls creating new tokens of this type
	TokenCreationPredicate []byte `protobuf:"bytes,4,opt,name=token_creation_predicate,json=tokenCreationPredicate,proto3" json:"token_creation_predicate,omitempty"`
	// the invariant predicate clause that all tokens of this type (and of sub- types of this type) inherit into their bearer predicates;
	InvariantPredicate []byte `protobuf:"bytes,5,opt,name=invariant_predicate,json=invariantPredicate,proto3" json:"invariant_predicate,omitempty"`
	// the clause that all tokens of this type (and of sub-types of this type) inherit into their data update predicates
	DataUpdatePredicate []byte `protobuf:"bytes,6,opt,name=data_update_predicate,json=dataUpdatePredicate,proto3" json:"data_update_predicate,omitempty"`
	// the input to satisfy the sub-type creation predicate.
	SubTypeCreationPredicateSignature []byte `protobuf:"bytes,7,opt,name=sub_type_creation_predicate_signature,json=subTypeCreationPredicateSignature,proto3" json:"sub_type_creation_predicate_signature,omitempty"`
}

func (x *CreateNonFungibleTokenTypeAttributes) Reset() {
	*x = CreateNonFungibleTokenTypeAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNonFungibleTokenTypeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNonFungibleTokenTypeAttributes) ProtoMessage() {}

func (x *CreateNonFungibleTokenTypeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNonFungibleTokenTypeAttributes.ProtoReflect.Descriptor instead.
func (*CreateNonFungibleTokenTypeAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNonFungibleTokenTypeAttributes) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateNonFungibleTokenTypeAttributes) GetParentTypeId() []byte {
	if x != nil {
		return x.ParentTypeId
	}
	return nil
}

func (x *CreateNonFungibleTokenTypeAttributes) GetSubTypeCreationPredicate() []byte {
	if x != nil {
		return x.SubTypeCreationPredicate
	}
	return nil
}

func (x *CreateNonFungibleTokenTypeAttributes) GetTokenCreationPredicate() []byte {
	if x != nil {
		return x.TokenCreationPredicate
	}
	return nil
}

func (x *CreateNonFungibleTokenTypeAttributes) GetInvariantPredicate() []byte {
	if x != nil {
		return x.InvariantPredicate
	}
	return nil
}

func (x *CreateNonFungibleTokenTypeAttributes) GetDataUpdatePredicate() []byte {
	if x != nil {
		return x.DataUpdatePredicate
	}
	return nil
}

func (x *CreateNonFungibleTokenTypeAttributes) GetSubTypeCreationPredicateSignature() []byte {
	if x != nil {
		return x.SubTypeCreationPredicateSignature
	}
	return nil
}

type MintNonFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the initial bearer predicate of the new token
	Bearer []byte `protobuf:"bytes,1,opt,name=bearer,proto3" json:"bearer,omitempty"`
	// identifies the type of the new token;
	NftType []byte `protobuf:"bytes,2,opt,name=nft_type,json=nftType,proto3" json:"nft_type,omitempty"`
	// the optional URI of an external resource associated with the new token
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// the optional data associated with the new token
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// the data update predicate of the new token;
	DataUpdatePredicate []byte `protobuf:"bytes,5,opt,name=data_update_predicate,json=dataUpdatePredicate,proto3" json:"data_update_predicate,omitempty"`
	// the input to satisfy the token creation predicate.
	TokenCreationPredicateSignature []byte `protobuf:"bytes,7,opt,name=token_creation_predicate_signature,json=tokenCreationPredicateSignature,proto3" json:"token_creation_predicate_signature,omitempty"`
}

func (x *MintNonFungibleTokenAttributes) Reset() {
	*x = MintNonFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintNonFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintNonFungibleTokenAttributes) ProtoMessage() {}

func (x *MintNonFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintNonFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*MintNonFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{1}
}

func (x *MintNonFungibleTokenAttributes) GetBearer() []byte {
	if x != nil {
		return x.Bearer
	}
	return nil
}

func (x *MintNonFungibleTokenAttributes) GetNftType() []byte {
	if x != nil {
		return x.NftType
	}
	return nil
}

func (x *MintNonFungibleTokenAttributes) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MintNonFungibleTokenAttributes) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MintNonFungibleTokenAttributes) GetDataUpdatePredicate() []byte {
	if x != nil {
		return x.DataUpdatePredicate
	}
	return nil
}

func (x *MintNonFungibleTokenAttributes) GetTokenCreationPredicateSignature() []byte {
	if x != nil {
		return x.TokenCreationPredicateSignature
	}
	return nil
}

type TransferNonFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the new bearer predicate of the token
	NewBearer []byte `protobuf:"bytes,1,opt,name=new_bearer,json=newBearer,proto3" json:"new_bearer,omitempty"`
	// optional nonce
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	//the backlink to the previous transaction with the token
	Backlink []byte `protobuf:"bytes,3,opt,name=backlink,proto3" json:"backlink,omitempty"`
	// the input to satisfy the token type invariant predicate
	InvariantPredicateSignature []byte `protobuf:"bytes,4,opt,name=invariant_predicate_signature,json=invariantPredicateSignature,proto3" json:"invariant_predicate_signature,omitempty"`
}

func (x *TransferNonFungibleTokenAttributes) Reset() {
	*x = TransferNonFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferNonFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferNonFungibleTokenAttributes) ProtoMessage() {}

func (x *TransferNonFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferNonFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*TransferNonFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{2}
}

func (x *TransferNonFungibleTokenAttributes) GetNewBearer() []byte {
	if x != nil {
		return x.NewBearer
	}
	return nil
}

func (x *TransferNonFungibleTokenAttributes) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TransferNonFungibleTokenAttributes) GetBacklink() []byte {
	if x != nil {
		return x.Backlink
	}
	return nil
}

func (x *TransferNonFungibleTokenAttributes) GetInvariantPredicateSignature() []byte {
	if x != nil {
		return x.InvariantPredicateSignature
	}
	return nil
}

type UpdateNonFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the new data to replace the data currently associated with the token
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// the backlink to the previous transaction with the token
	Backlink []byte `protobuf:"bytes,2,opt,name=backlink,proto3" json:"backlink,omitempty"`
	//  the input to satisfy the token data update predicate.
	DataUpdateSignature []byte `protobuf:"bytes,4,opt,name=data_update_signature,json=dataUpdateSignature,proto3" json:"data_update_signature,omitempty"`
}

func (x *UpdateNonFungibleTokenAttributes) Reset() {
	*x = UpdateNonFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNonFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNonFungibleTokenAttributes) ProtoMessage() {}

func (x *UpdateNonFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNonFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*UpdateNonFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateNonFungibleTokenAttributes) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateNonFungibleTokenAttributes) GetBacklink() []byte {
	if x != nil {
		return x.Backlink
	}
	return nil
}

func (x *UpdateNonFungibleTokenAttributes) GetDataUpdateSignature() []byte {
	if x != nil {
		return x.DataUpdateSignature
	}
	return nil
}

type CreateFungibleTokenTypeAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is the symbol (short name) of this token type
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// identifies the parent type that the new type derives from; 0 indicates there is no parent type;
	ParentTypeId []byte `protobuf:"bytes,2,opt,name=parent_type_id,json=parentTypeId,proto3" json:"parent_type_id,omitempty"`
	// is the number of decimal places to display for values of tokens of the new type;
	DecimalPlaces uint32 `protobuf:"varint,3,opt,name=decimalPlaces,proto3" json:"decimalPlaces,omitempty"`
	// the predicate clause that controls defining new sub-types of this type;
	SubTypeCreationPredicate []byte `protobuf:"bytes,4,opt,name=sub_type_creation_predicate,json=subTypeCreationPredicate,proto3" json:"sub_type_creation_predicate,omitempty"`
	// the predicate clause that controls creating new tokens of this type
	TokenCreationPredicate []byte `protobuf:"bytes,5,opt,name=token_creation_predicate,json=tokenCreationPredicate,proto3" json:"token_creation_predicate,omitempty"`
	// the invariant predicate clause that all tokens of this type (and of sub- types of this type) inherit into their bearer predicates;
	InvariantPredicate []byte `protobuf:"bytes,6,opt,name=invariant_predicate,json=invariantPredicate,proto3" json:"invariant_predicate,omitempty"`
	// the input to satisfy the sub-type creation predicate.
	SubTypeCreationPredicateSignature []byte `protobuf:"bytes,7,opt,name=sub_type_creation_predicate_signature,json=subTypeCreationPredicateSignature,proto3" json:"sub_type_creation_predicate_signature,omitempty"`
}

func (x *CreateFungibleTokenTypeAttributes) Reset() {
	*x = CreateFungibleTokenTypeAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFungibleTokenTypeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFungibleTokenTypeAttributes) ProtoMessage() {}

func (x *CreateFungibleTokenTypeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFungibleTokenTypeAttributes.ProtoReflect.Descriptor instead.
func (*CreateFungibleTokenTypeAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFungibleTokenTypeAttributes) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateFungibleTokenTypeAttributes) GetParentTypeId() []byte {
	if x != nil {
		return x.ParentTypeId
	}
	return nil
}

func (x *CreateFungibleTokenTypeAttributes) GetDecimalPlaces() uint32 {
	if x != nil {
		return x.DecimalPlaces
	}
	return 0
}

func (x *CreateFungibleTokenTypeAttributes) GetSubTypeCreationPredicate() []byte {
	if x != nil {
		return x.SubTypeCreationPredicate
	}
	return nil
}

func (x *CreateFungibleTokenTypeAttributes) GetTokenCreationPredicate() []byte {
	if x != nil {
		return x.TokenCreationPredicate
	}
	return nil
}

func (x *CreateFungibleTokenTypeAttributes) GetInvariantPredicate() []byte {
	if x != nil {
		return x.InvariantPredicate
	}
	return nil
}

func (x *CreateFungibleTokenTypeAttributes) GetSubTypeCreationPredicateSignature() []byte {
	if x != nil {
		return x.SubTypeCreationPredicateSignature
	}
	return nil
}

type MintFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the initial bearer predicate of the new token
	Bearer []byte `protobuf:"bytes,1,opt,name=bearer,proto3" json:"bearer,omitempty"`
	// identifies the type of the new token;
	Type []byte `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// the value of the new token;
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// the input to satisfy the token creation predicate.
	TokenCreationPredicateSignature []byte `protobuf:"bytes,4,opt,name=token_creation_predicate_signature,json=tokenCreationPredicateSignature,proto3" json:"token_creation_predicate_signature,omitempty"`
}

func (x *MintFungibleTokenAttributes) Reset() {
	*x = MintFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintFungibleTokenAttributes) ProtoMessage() {}

func (x *MintFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*MintFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{5}
}

func (x *MintFungibleTokenAttributes) GetBearer() []byte {
	if x != nil {
		return x.Bearer
	}
	return nil
}

func (x *MintFungibleTokenAttributes) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MintFungibleTokenAttributes) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MintFungibleTokenAttributes) GetTokenCreationPredicateSignature() []byte {
	if x != nil {
		return x.TokenCreationPredicateSignature
	}
	return nil
}

type TransferFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the initial bearer predicate of the new token
	NewBearer []byte `protobuf:"bytes,1,opt,name=new_bearer,json=newBearer,proto3" json:"new_bearer,omitempty"`
	// the value to transfer
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// the backlink to the previous transaction with this token
	Backlink []byte `protobuf:"bytes,4,opt,name=backlink,proto3" json:"backlink,omitempty"`
	// the input to satisfy the token type invariant predicate
	InvariantPredicateSignature []byte `protobuf:"bytes,5,opt,name=invariant_predicate_signature,json=invariantPredicateSignature,proto3" json:"invariant_predicate_signature,omitempty"`
}

func (x *TransferFungibleTokenAttributes) Reset() {
	*x = TransferFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFungibleTokenAttributes) ProtoMessage() {}

func (x *TransferFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*TransferFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{6}
}

func (x *TransferFungibleTokenAttributes) GetNewBearer() []byte {
	if x != nil {
		return x.NewBearer
	}
	return nil
}

func (x *TransferFungibleTokenAttributes) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TransferFungibleTokenAttributes) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TransferFungibleTokenAttributes) GetBacklink() []byte {
	if x != nil {
		return x.Backlink
	}
	return nil
}

func (x *TransferFungibleTokenAttributes) GetInvariantPredicateSignature() []byte {
	if x != nil {
		return x.InvariantPredicateSignature
	}
	return nil
}

type SplitFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the bearer predicate of the new token;
	NewBearer []byte `protobuf:"bytes,1,opt,name=new_bearer,json=newBearer,proto3" json:"new_bearer,omitempty"`
	// the value of the new token
	TargetValue uint64 `protobuf:"varint,2,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	Nonce       []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// the backlink to the previous transaction with this token
	Backlink []byte `protobuf:"bytes,4,opt,name=backlink,proto3" json:"backlink,omitempty"`
	// the input to satisfy the token type invariant predicate
	InvariantPredicateSignature []byte `protobuf:"bytes,5,opt,name=invariant_predicate_signature,json=invariantPredicateSignature,proto3" json:"invariant_predicate_signature,omitempty"`
}

func (x *SplitFungibleTokenAttributes) Reset() {
	*x = SplitFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitFungibleTokenAttributes) ProtoMessage() {}

func (x *SplitFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*SplitFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{7}
}

func (x *SplitFungibleTokenAttributes) GetNewBearer() []byte {
	if x != nil {
		return x.NewBearer
	}
	return nil
}

func (x *SplitFungibleTokenAttributes) GetTargetValue() uint64 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *SplitFungibleTokenAttributes) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SplitFungibleTokenAttributes) GetBacklink() []byte {
	if x != nil {
		return x.Backlink
	}
	return nil
}

func (x *SplitFungibleTokenAttributes) GetInvariantPredicateSignature() []byte {
	if x != nil {
		return x.InvariantPredicateSignature
	}
	return nil
}

type BurnFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifies the type of the token to burn;
	Type []byte `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the value to burn
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Nonce []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// the backlink to the previous transaction with this token
	Backlink []byte `protobuf:"bytes,4,opt,name=backlink,proto3" json:"backlink,omitempty"`
	// the input to satisfy the token type invariant predicate
	InvariantPredicateSignature []byte `protobuf:"bytes,5,opt,name=invariant_predicate_signature,json=invariantPredicateSignature,proto3" json:"invariant_predicate_signature,omitempty"`
}

func (x *BurnFungibleTokenAttributes) Reset() {
	*x = BurnFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnFungibleTokenAttributes) ProtoMessage() {}

func (x *BurnFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*BurnFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{8}
}

func (x *BurnFungibleTokenAttributes) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *BurnFungibleTokenAttributes) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BurnFungibleTokenAttributes) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *BurnFungibleTokenAttributes) GetBacklink() []byte {
	if x != nil {
		return x.Backlink
	}
	return nil
}

func (x *BurnFungibleTokenAttributes) GetInvariantPredicateSignature() []byte {
	if x != nil {
		return x.InvariantPredicateSignature
	}
	return nil
}

type JoinFungibleTokenAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the transactions that burned the source tokens;
	BurnTransactions []*txsystem.Transaction `protobuf:"bytes,1,rep,name=burn_transactions,json=burnTransactions,proto3" json:"burn_transactions,omitempty"`
	// block proofs for burn transactions
	Proofs []*block.BlockProof `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	// the backlink to the previous transaction with this token
	Backlink []byte `protobuf:"bytes,3,opt,name=backlink,proto3" json:"backlink,omitempty"`
	// the input to satisfy the token type invariant predicate
	InvariantPredicateSignature []byte `protobuf:"bytes,4,opt,name=invariant_predicate_signature,json=invariantPredicateSignature,proto3" json:"invariant_predicate_signature,omitempty"`
}

func (x *JoinFungibleTokenAttributes) Reset() {
	*x = JoinFungibleTokenAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_token_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinFungibleTokenAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinFungibleTokenAttributes) ProtoMessage() {}

func (x *JoinFungibleTokenAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_token_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinFungibleTokenAttributes.ProtoReflect.Descriptor instead.
func (*JoinFungibleTokenAttributes) Descriptor() ([]byte, []int) {
	return file_token_tx_proto_rawDescGZIP(), []int{9}
}

func (x *JoinFungibleTokenAttributes) GetBurnTransactions() []*txsystem.Transaction {
	if x != nil {
		return x.BurnTransactions
	}
	return nil
}

func (x *JoinFungibleTokenAttributes) GetProofs() []*block.BlockProof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *JoinFungibleTokenAttributes) GetBacklink() []byte {
	if x != nil {
		return x.Backlink
	}
	return nil
}

func (x *JoinFungibleTokenAttributes) GetInvariantPredicateSignature() []byte {
	if x != nil {
		return x.InvariantPredicateSignature
	}
	return nil
}

var File_token_tx_proto protoreflect.FileDescriptor

var file_token_tx_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x24,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x50, 0x0a, 0x25, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x21, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x1e, 0x4d, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x46, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6e, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x1d, 0x69, 0x6e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b,
	0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x18, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x73, 0x75, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x4d,
	0x69, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x22,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x1f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x1d, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x69, 0x6e, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1c, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a,
	0x1d, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x72, 0x6e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a,
	0x1d, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1b, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x11, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x62, 0x75, 0x72, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a,
	0x1d, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x74, 0x78, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x2f, 0x3b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_token_tx_proto_rawDescOnce sync.Once
	file_token_tx_proto_rawDescData = file_token_tx_proto_rawDesc
)

func file_token_tx_proto_rawDescGZIP() []byte {
	file_token_tx_proto_rawDescOnce.Do(func() {
		file_token_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_token_tx_proto_rawDescData)
	})
	return file_token_tx_proto_rawDescData
}

var file_token_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_token_tx_proto_goTypes = []interface{}{
	(*CreateNonFungibleTokenTypeAttributes)(nil), // 0: alphabill.tokens.v1.CreateNonFungibleTokenTypeAttributes
	(*MintNonFungibleTokenAttributes)(nil),       // 1: alphabill.tokens.v1.MintNonFungibleTokenAttributes
	(*TransferNonFungibleTokenAttributes)(nil),   // 2: alphabill.tokens.v1.TransferNonFungibleTokenAttributes
	(*UpdateNonFungibleTokenAttributes)(nil),     // 3: alphabill.tokens.v1.UpdateNonFungibleTokenAttributes
	(*CreateFungibleTokenTypeAttributes)(nil),    // 4: alphabill.tokens.v1.CreateFungibleTokenTypeAttributes
	(*MintFungibleTokenAttributes)(nil),          // 5: alphabill.tokens.v1.MintFungibleTokenAttributes
	(*TransferFungibleTokenAttributes)(nil),      // 6: alphabill.tokens.v1.TransferFungibleTokenAttributes
	(*SplitFungibleTokenAttributes)(nil),         // 7: alphabill.tokens.v1.SplitFungibleTokenAttributes
	(*BurnFungibleTokenAttributes)(nil),          // 8: alphabill.tokens.v1.BurnFungibleTokenAttributes
	(*JoinFungibleTokenAttributes)(nil),          // 9: alphabill.tokens.v1.JoinFungibleTokenAttributes
	(*txsystem.Transaction)(nil),                 // 10: Transaction
	(*block.BlockProof)(nil),                     // 11: BlockProof
}
var file_token_tx_proto_depIdxs = []int32{
	10, // 0: alphabill.tokens.v1.JoinFungibleTokenAttributes.burn_transactions:type_name -> Transaction
	11, // 1: alphabill.tokens.v1.JoinFungibleTokenAttributes.proofs:type_name -> BlockProof
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_token_tx_proto_init() }
func file_token_tx_proto_init() {
	if File_token_tx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_token_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNonFungibleTokenTypeAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintNonFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferNonFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNonFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFungibleTokenTypeAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_token_tx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinFungibleTokenAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_token_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_token_tx_proto_goTypes,
		DependencyIndexes: file_token_tx_proto_depIdxs,
		MessageInfos:      file_token_tx_proto_msgTypes,
	}.Build()
	File_token_tx_proto = out.File
	file_token_tx_proto_rawDesc = nil
	file_token_tx_proto_goTypes = nil
	file_token_tx_proto_depIdxs = nil
}
