// Code generated by mockery v2.9.4. DO NOT EDIT.

package state

import mock "github.com/stretchr/testify/mock"

// MockUnitsTree is an autogenerated mock type for the UnitsTree type
type MockUnitsTree struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockUnitsTree) Delete(id ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: id
func (_m *MockUnitsTree) Exists(id ID) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *MockUnitsTree) Get(id ID) (Predicate, Data, error) {
	ret := _m.Called(id)

	var r0 Predicate
	if rf, ok := ret.Get(0).(func(ID) Predicate); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Predicate)
		}
	}

	var r1 Data
	if rf, ok := ret.Get(1).(func(ID) Data); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Data)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ID) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: id, owner, data
func (_m *MockUnitsTree) Set(id ID, owner Predicate, data Data) error {
	ret := _m.Called(id, owner, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(ID, Predicate, Data) error); ok {
		r0 = rf(id, owner, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetData provides a mock function with given fields: id, data
func (_m *MockUnitsTree) SetData(id ID, data Data) error {
	ret := _m.Called(id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(ID, Data) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOwner provides a mock function with given fields: id, owner
func (_m *MockUnitsTree) SetOwner(id ID, owner Predicate) error {
	ret := _m.Called(id, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(ID, Predicate) error); ok {
		r0 = rf(id, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
