services:
  alphabill-volume-init:
    extends:
      file: docker-services.yml
      service: alphabill-volume-init
  alphabill-root1:
    extends:
      file: docker-services.yml
      service: alphabill-root-bootnode
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: root1 } }
      - genesis:/genesis-nodes
    depends_on:
      sign-root-trust-base1:
        condition: service_completed_successfully
      sign-root-trust-base2:
        condition: service_completed_successfully
      sign-root-trust-base3:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "nc", "-zv", "alphabill-root1", "8000" ]
      interval: 2s
    networks:
      - default
  alphabill-root2:
    extends:
      file: docker-services.yml
      service: alphabill-root
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: root2 } }
      - genesis:/genesis-nodes
    depends_on:
      sign-root-trust-base1:
        condition: service_completed_successfully
      sign-root-trust-base2:
        condition: service_completed_successfully
      sign-root-trust-base3:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "nc", "-zv", "alphabill-root2", "8000" ]
      interval: 2s
    networks:
      - default
  alphabill-root3:
    extends:
      file: docker-services.yml
      service: alphabill-root
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: root3 } }
      - genesis:/genesis-nodes
    depends_on:
      sign-root-trust-base1:
        condition: service_completed_successfully
      sign-root-trust-base2:
        condition: service_completed_successfully
      sign-root-trust-base3:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "nc", "-zv", "alphabill-root3", "8000" ]
      interval: 2s
    networks:
      - default
  alphabill-money1:
    extends:
      file: docker-services.yml
      service: alphabill-money
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: money1 } }
      - genesis:/genesis-nodes
    depends_on:
      alphabill-root1:
        condition: service_healthy
      alphabill-root2:
        condition: service_healthy
      alphabill-root3:
        condition: service_healthy
    ports:
      - 8001:8001
      - 8011:8002
    networks:
      - default
  alphabill-money2:
    extends:
      file: docker-services.yml
      service: alphabill-money
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: money2 } }
      - genesis:/genesis-nodes
    depends_on:
      alphabill-root1:
        condition: service_healthy
      alphabill-root2:
        condition: service_healthy
      alphabill-root3:
        condition: service_healthy
    ports:
      - 8002:8001
    networks:
      - default
  alphabill-money3:
    extends:
      file: docker-services.yml
      service: alphabill-money
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: money3 } }
      - genesis:/genesis-nodes
    depends_on:
      alphabill-root1:
        condition: service_healthy
      alphabill-root2:
        condition: service_healthy
      alphabill-root3:
        condition: service_healthy
    ports:
      - 8003:8001
    networks:
      - default
  alphabill-tokens1:
    extends:
      file: docker-services.yml
      service: alphabill-tokens
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: tokens1 } }
      - genesis:/genesis-nodes
    depends_on:
      generate-tokens-genesis1:
        condition: service_completed_successfully
      alphabill-root1:
        condition: service_healthy
      alphabill-root2:
        condition: service_healthy
      alphabill-root3:
        condition: service_healthy
    ports:
      - 9001:8001
    networks:
      - default
  alphabill-tokens2:
    extends:
      file: docker-services.yml
      service: alphabill-tokens
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: tokens2 } }
      - genesis:/genesis-nodes
    depends_on:
      generate-tokens-genesis2:
        condition: service_completed_successfully
      alphabill-root1:
        condition: service_healthy
      alphabill-root2:
        condition: service_healthy
      alphabill-root3:
        condition: service_healthy
    ports:
      - 9002:8001
    networks:
      - default
  alphabill-tokens3:
    extends:
      file: docker-services.yml
      service: alphabill-tokens
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: tokens3 } }
      - genesis:/genesis-nodes
    depends_on:
      generate-tokens-genesis3:
          condition: service_completed_successfully
      alphabill-root1:
        condition: service_healthy
      alphabill-root2:
        condition: service_healthy
      alphabill-root3:
        condition: service_healthy
    ports:
      - 9003:8001
    networks:
      - default
  generate-root-genesis1:
    extends:
      file: docker-services.yml
      service: generate-root-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: root1 } }
    depends_on:
      generate-money-genesis1:
        condition: service_completed_successfully
      generate-money-genesis2:
        condition: service_completed_successfully
      generate-money-genesis3:
        condition: service_completed_successfully
      generate-tokens-genesis1:
        condition: service_completed_successfully
      generate-tokens-genesis2:
        condition: service_completed_successfully
      generate-tokens-genesis3:
        condition: service_completed_successfully
  generate-root-genesis2:
    extends:
      file: docker-services.yml
      service: generate-root-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: root2 } }
    depends_on:
      generate-money-genesis1:
        condition: service_completed_successfully
      generate-money-genesis2:
        condition: service_completed_successfully
      generate-money-genesis3:
        condition: service_completed_successfully
      generate-tokens-genesis1:
        condition: service_completed_successfully
      generate-tokens-genesis2:
        condition: service_completed_successfully
      generate-tokens-genesis3:
        condition: service_completed_successfully
  generate-root-genesis3:
    extends:
      file: docker-services.yml
      service: generate-root-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: root3 } }
    depends_on:
      generate-money-genesis1:
        condition: service_completed_successfully
      generate-money-genesis2:
        condition: service_completed_successfully
      generate-money-genesis3:
        condition: service_completed_successfully
      generate-tokens-genesis1:
        condition: service_completed_successfully
      generate-tokens-genesis2:
        condition: service_completed_successfully
      generate-tokens-genesis3:
        condition: service_completed_successfully
  combine-root-genesis1:
    extends:
      file: docker-services.yml
      service: combine-root-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis/root, volume: { subpath: root1 } }
    depends_on:
      generate-root-genesis1:
          condition: service_completed_successfully
      generate-root-genesis2:
          condition: service_completed_successfully
      generate-root-genesis3:
          condition: service_completed_successfully
  combine-root-genesis2:
    extends:
      file: docker-services.yml
      service: combine-root-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis/root, volume: { subpath: root2 } }
    depends_on:
      combine-root-genesis1:
        condition: service_completed_successfully
  combine-root-genesis3:
    extends:
      file: docker-services.yml
      service: combine-root-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis/root, volume: { subpath: root3 } }
    depends_on:
      combine-root-genesis2:
        condition: service_completed_successfully
  generate-root-trust-base:
    extends:
      file: docker-services.yml
      service: generate-root-trust-base
    depends_on:
      combine-root-genesis1:
        condition: service_completed_successfully
      combine-root-genesis2:
        condition: service_completed_successfully
      combine-root-genesis3:
        condition: service_completed_successfully
  sign-root-trust-base1:
    extends:
      file: docker-services.yml
      service: sign-root-trust-base
    volumes:
      - { type: volume, source: genesis, target: /genesis/root, volume: { subpath: root1 } }
      - genesis:/genesis-nodes
    depends_on:
      generate-root-trust-base:
        condition: service_completed_successfully
  sign-root-trust-base2:
    extends:
      file: docker-services.yml
      service: sign-root-trust-base
    volumes:
      - { type: volume, source: genesis, target: /genesis/root, volume: { subpath: root2 } }
      - genesis:/genesis-nodes
    depends_on:
      sign-root-trust-base1:
        condition: service_completed_successfully
  sign-root-trust-base3:
    extends:
      file: docker-services.yml
      service: sign-root-trust-base
    volumes:
      - { type: volume, source: genesis, target: /genesis/root, volume: { subpath: root3 } }
      - genesis:/genesis-nodes
    depends_on:
      sign-root-trust-base2:
        condition: service_completed_successfully
  generate-tokens-genesis1:
    extends:
      file: docker-services.yml
      service: generate-tokens-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: tokens1 } }
  generate-tokens-genesis2:
    extends:
      file: docker-services.yml
      service: generate-tokens-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: tokens2 } }
  generate-tokens-genesis3:
    extends:
      file: docker-services.yml
      service: generate-tokens-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: tokens3 } }
  generate-money-genesis1:
    extends:
      file: docker-services.yml
      service: generate-money-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: money1 } }
  generate-money-genesis2:
    extends:
      file: docker-services.yml
      service: generate-money-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: money2 } }
  generate-money-genesis3:
    extends:
      file: docker-services.yml
      service: generate-money-genesis
    volumes:
      - { type: volume, source: genesis, target: /genesis, volume: { subpath: money3 } }
networks:
  default:

volumes:
  genesis:
