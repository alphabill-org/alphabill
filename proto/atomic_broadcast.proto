syntax = "proto3";

import "certification.proto";
import "certificates.proto";

option go_package = "github.com/alphabill-org/alphabill/internal/network/protocol/atomic_broadcast;atomic_broadcast";

message IRChangeReqMsg {
  enum CERT_REASON{
    QUORUM = 0;
    QUORUM_NOT_POSSIBLE = 1;
    T2_TIMEOUT = 2;
  }
  // system identifier of the input record changed
  bytes system_identifier = 1;
  CERT_REASON certReason = 2;
  // IR change (quorum or no quorum possible of block certification requests)
  repeated BlockCertificationRequest requests = 3;
}

message Payload {
  // IR change requests with quorum or no quorum possible
  repeated IRChangeReqMsg requests = 1;
}

message QuorumCert {
  // Consensus data
  RootRoundInfo vote_info = 1;
  // Commit info
  CommitInfo ledger_commit_info = 2;
  // Node identifier to signature map (NB! aggregated signature schema in spec)
  map<string, bytes> signatures = 3;
}

message BlockData {
  // NodeIdentifier of the proposer
  string author = 1;
  // Root round number
  uint64 round = 2;
  // Epoch to establish valid configuration
  uint64 epoch = 3;
  // timestamp
  uint64 timestamp = 4;
  // Payload that will trigger changes to the state
  Payload payload = 5;
  // quorum certificate for ancestor
  // before payload can be applied check that local state matches state in qc
  // qc.vote_info.proposed.state_hash == h(UC[])
  QuorumCert qc = 6;
}

message Timeout {
  // Epoch to establish valid configuration
  uint64 epoch = 1;
  // Root round number
  uint64 round = 2;
  // Highest quorum certificate of the validator
  QuorumCert high_qc = 3;
}

message TimeoutVote {
  // round from timeout.high_qc.voteInfo.round
  uint64 hqc_round = 1;
  // timeout signature is TimeoutMsg signature - round, epoch, hqc_round, author
  bytes signature = 2;
}

message TimeoutCert {
  // Round and epoch of the timeout event
  Timeout timeout = 1;
  // 2f+1 signatures from nodes confirming TC
  map<string, TimeoutVote> signatures = 2;
}

message ProposalMsg {
  // Proposed change
  BlockData block = 1;
  // Last timeout certificate for block.round - 1 if block.qc.round != block.round - 1
  optional TimeoutCert last_round_tc = 2;
  // Signature, sign(block_id)
  optional bytes signature = 3;
}

// Message for both timeout and proposal vote
message VoteMsg {
  // Proposed block hash and resulting state hash
  RootRoundInfo vote_info = 1;
  // Commit info
  CommitInfo ledger_commit_info = 2;
  // Sync with highest QC
  QuorumCert high_qc = 3;
  // Voter node identifier
  string author = 4;
  // Vote signature on hash of consensus info
  bytes signature = 5;
}

message TimeoutMsg {
  Timeout timeout = 1;
  string author = 2;
  bytes signature = 3;
}

// Recover state
message StateRequestMsg {
  uint64 round = 1;
}

message StateReplyMsg {
  enum Status {
    // All ok, latest included in reply
    OK = 0;
    // invalid state hash (in the future)
    UNKNOWN_STATE = 1;
  }
  Status status = 1;
  repeated InputRecord ir = 2;
  UnicitySeal seal = 3;
}
