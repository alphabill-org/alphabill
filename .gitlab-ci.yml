stages:
  - test
  - build
  - analyze

image: $CI_REGISTRY/alphabill/gitlab-ci-image:main

include:
  - project: "$CI_PROJECT_NAMESPACE/gitlab-ci-image"
    file:
      - "/templates/go-cache.gitlab-ci.yml"
      - "/templates/go-vet.gitlab-ci.yml"
      - "/templates/gosec.gitlab-ci.yml"
      - "/templates/nancy.gitlab-ci.yml"
      - "/templates/sonarqube.gitlab-ci.yml"
      - "/templates/trivy.gitlab-ci.yml"

.go-dependency:
  before_script:
    # Configure go caching
    - mkdir -p .go

vet:
  stage: test
  extends:
    - .go-cache
    - .go-dependency
  needs: []
  script:
    - go vet ./...

test:
  stage: test
  extends:
    - .go-cache
    - .go-dependency
  needs:
    # tests are expensive compared to vet so do not start tests unless vet job succeeded
    - vet
  script:
    - gotestsum --junitfile report.xml --format standard-quiet -- ./... -race -count=1 -parallel=1 -coverprofile test-coverage.out
    - go tool cover -func test-coverage.out
    - gocover-cobertura < test-coverage.out > test-coverage-cobertura.xml
  coverage: '/\(statements\)(?:\s+)?(\d+(?:\.\d+)?%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test-coverage-cobertura.xml
      junit: report.xml
    paths:
      - test-coverage.out
    when: always

build-docker:
  stage: build
  extends: .go-dependency
  image: docker:latest
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build --push --tag ${IMAGE_TAG} --file scripts/Dockerfile .
  needs: []

build:
  stage: build
  extends:
    - .go-cache
    - .go-dependency
  script:
    - make build
  artifacts:
    paths:
      - build
  needs: []

sonarqube-check:
  needs: ["gosec", "test"]
