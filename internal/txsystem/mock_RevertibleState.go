// Code generated by mockery v2.9.4. DO NOT EDIT.

package txsystem

import (
	state2 "gitdc.ee.guardtime.com/alphabill/alphabill/internal/txsystem/state"
	uint256 "github.com/holiman/uint256"
	mock "github.com/stretchr/testify/mock"
)

// MockRevertibleState is an autogenerated mock type for the RevertibleState type
type MockRevertibleState struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: id, owner, data, stateHash
func (_m *MockRevertibleState) AddItem(id *uint256.Int, owner state2.Predicate, data state2.UnitData, stateHash []byte) error {
	ret := _m.Called(id, owner, data, stateHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, state2.Predicate, state2.UnitData, []byte) error); ok {
		r0 = rf(id, owner, data, stateHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MockRevertibleState) Commit() {
	_m.Called()
}

// DeleteItem provides a mock function with given fields: id
func (_m *MockRevertibleState) DeleteItem(id *uint256.Int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRootHash provides a mock function with given fields:
func (_m *MockRevertibleState) GetRootHash() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Revert provides a mock function with given fields:
func (_m *MockRevertibleState) Revert() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOwner provides a mock function with given fields: id, owner, stateHash
func (_m *MockRevertibleState) SetOwner(id *uint256.Int, owner state2.Predicate, stateHash []byte) error {
	ret := _m.Called(id, owner, stateHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, state2.Predicate, []byte) error); ok {
		r0 = rf(id, owner, stateHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TotalValue provides a mock function with given fields:
func (_m *MockRevertibleState) TotalValue() state2.SummaryValue {
	ret := _m.Called()

	var r0 state2.SummaryValue
	if rf, ok := ret.Get(0).(func() state2.SummaryValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state2.SummaryValue)
		}
	}

	return r0
}

// UpdateData provides a mock function with given fields: id, f, stateHash
func (_m *MockRevertibleState) UpdateData(id *uint256.Int, f state2.UpdateFunction, stateHash []byte) error {
	ret := _m.Called(id, f, stateHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, state2.UpdateFunction, []byte) error); ok {
		r0 = rf(id, f, stateHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
