// Code generated by mockery v2.9.4. DO NOT EDIT.

package state

import (
	uint256 "github.com/holiman/uint256"
	mock "github.com/stretchr/testify/mock"
)

// MockUnitsTree is an autogenerated mock type for the UnitsTree type
type MockUnitsTree struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockUnitsTree) Delete(id *uint256.Int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: id
func (_m *MockUnitsTree) Exists(id *uint256.Int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*uint256.Int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uint256.Int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *MockUnitsTree) Get(id *uint256.Int) (Predicate, Data, []byte, error) {
	ret := _m.Called(id)

	var r0 Predicate
	if rf, ok := ret.Get(0).(func(*uint256.Int) Predicate); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Predicate)
		}
	}

	var r1 Data
	if rf, ok := ret.Get(1).(func(*uint256.Int) Data); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Data)
		}
	}

	var r2 []byte
	if rf, ok := ret.Get(2).(func(*uint256.Int) []byte); ok {
		r2 = rf(id)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]byte)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*uint256.Int) error); ok {
		r3 = rf(id)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetRootHash provides a mock function with given fields:
func (_m *MockUnitsTree) GetRootHash() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetSummaryValue provides a mock function with given fields:
func (_m *MockUnitsTree) GetSummaryValue() SummaryValue {
	ret := _m.Called()

	var r0 SummaryValue
	if rf, ok := ret.Get(0).(func() SummaryValue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SummaryValue)
		}
	}

	return r0
}

// Set provides a mock function with given fields: id, owner, data, stateHash
func (_m *MockUnitsTree) Set(id *uint256.Int, owner Predicate, data Data, stateHash []byte) error {
	ret := _m.Called(id, owner, data, stateHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, Predicate, Data, []byte) error); ok {
		r0 = rf(id, owner, data, stateHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetData provides a mock function with given fields: id, data, stateHash
func (_m *MockUnitsTree) SetData(id *uint256.Int, data Data, stateHash []byte) error {
	ret := _m.Called(id, data, stateHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, Data, []byte) error); ok {
		r0 = rf(id, data, stateHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOwner provides a mock function with given fields: id, owner, stateHash
func (_m *MockUnitsTree) SetOwner(id *uint256.Int, owner Predicate, stateHash []byte) error {
	ret := _m.Called(id, owner, stateHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uint256.Int, Predicate, []byte) error); ok {
		r0 = rf(id, owner, stateHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
