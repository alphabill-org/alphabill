// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.9
// source: atomic_broadcast.proto

package atomic_broadcast

import (
	certificates "github.com/alphabill-org/alphabill/internal/certificates"
	certification "github.com/alphabill-org/alphabill/internal/network/protocol/certification"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IRChangeReqMsg_CERT_REASON int32

const (
	IRChangeReqMsg_QUORUM              IRChangeReqMsg_CERT_REASON = 0
	IRChangeReqMsg_QUORUM_NOT_POSSIBLE IRChangeReqMsg_CERT_REASON = 1
	IRChangeReqMsg_T2_TIMEOUT          IRChangeReqMsg_CERT_REASON = 2
)

// Enum value maps for IRChangeReqMsg_CERT_REASON.
var (
	IRChangeReqMsg_CERT_REASON_name = map[int32]string{
		0: "QUORUM",
		1: "QUORUM_NOT_POSSIBLE",
		2: "T2_TIMEOUT",
	}
	IRChangeReqMsg_CERT_REASON_value = map[string]int32{
		"QUORUM":              0,
		"QUORUM_NOT_POSSIBLE": 1,
		"T2_TIMEOUT":          2,
	}
)

func (x IRChangeReqMsg_CERT_REASON) Enum() *IRChangeReqMsg_CERT_REASON {
	p := new(IRChangeReqMsg_CERT_REASON)
	*p = x
	return p
}

func (x IRChangeReqMsg_CERT_REASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IRChangeReqMsg_CERT_REASON) Descriptor() protoreflect.EnumDescriptor {
	return file_atomic_broadcast_proto_enumTypes[0].Descriptor()
}

func (IRChangeReqMsg_CERT_REASON) Type() protoreflect.EnumType {
	return &file_atomic_broadcast_proto_enumTypes[0]
}

func (x IRChangeReqMsg_CERT_REASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IRChangeReqMsg_CERT_REASON.Descriptor instead.
func (IRChangeReqMsg_CERT_REASON) EnumDescriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{0, 0}
}

type IRChangeReqMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// system identifier of the input record changed
	SystemIdentifier []byte                     `protobuf:"bytes,1,opt,name=system_identifier,json=systemIdentifier,proto3" json:"system_identifier,omitempty"`
	CertReason       IRChangeReqMsg_CERT_REASON `protobuf:"varint,2,opt,name=certReason,proto3,enum=IRChangeReqMsg_CERT_REASON" json:"certReason,omitempty"`
	// IR change (quorum or no quorum possible of block certification requests)
	Requests []*certification.BlockCertificationRequest `protobuf:"bytes,3,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *IRChangeReqMsg) Reset() {
	*x = IRChangeReqMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRChangeReqMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRChangeReqMsg) ProtoMessage() {}

func (x *IRChangeReqMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRChangeReqMsg.ProtoReflect.Descriptor instead.
func (*IRChangeReqMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{0}
}

func (x *IRChangeReqMsg) GetSystemIdentifier() []byte {
	if x != nil {
		return x.SystemIdentifier
	}
	return nil
}

func (x *IRChangeReqMsg) GetCertReason() IRChangeReqMsg_CERT_REASON {
	if x != nil {
		return x.CertReason
	}
	return IRChangeReqMsg_QUORUM
}

func (x *IRChangeReqMsg) GetRequests() []*certification.BlockCertificationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IR change requests with quorum or no quorum possible
	Requests []*IRChangeReqMsg `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{1}
}

func (x *Payload) GetRequests() []*IRChangeReqMsg {
	if x != nil {
		return x.Requests
	}
	return nil
}

type QuorumCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consensus data
	VoteInfo *certificates.RootRoundInfo `protobuf:"bytes,1,opt,name=vote_info,json=voteInfo,proto3" json:"vote_info,omitempty"`
	// Commit info
	LedgerCommitInfo *certificates.CommitInfo `protobuf:"bytes,2,opt,name=ledger_commit_info,json=ledgerCommitInfo,proto3" json:"ledger_commit_info,omitempty"`
	// Node identifier to signature map (NB! aggregated signature schema in spec)
	Signatures map[string][]byte `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuorumCert) Reset() {
	*x = QuorumCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumCert) ProtoMessage() {}

func (x *QuorumCert) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumCert.ProtoReflect.Descriptor instead.
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{2}
}

func (x *QuorumCert) GetVoteInfo() *certificates.RootRoundInfo {
	if x != nil {
		return x.VoteInfo
	}
	return nil
}

func (x *QuorumCert) GetLedgerCommitInfo() *certificates.CommitInfo {
	if x != nil {
		return x.LedgerCommitInfo
	}
	return nil
}

func (x *QuorumCert) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type BlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NodeIdentifier of the proposer
	Author string `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	// Root round number
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// Epoch to establish valid configuration
	Epoch uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// timestamp
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Payload that will trigger changes to the state
	Payload *Payload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	// quorum certificate for ancestor
	// before payload can be applied check that local state matches state in qc
	// qc.vote_info.proposed.state_hash == h(UC[])
	Qc *QuorumCert `protobuf:"bytes,6,opt,name=qc,proto3" json:"qc,omitempty"`
}

func (x *BlockData) Reset() {
	*x = BlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData) ProtoMessage() {}

func (x *BlockData) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData.ProtoReflect.Descriptor instead.
func (*BlockData) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{3}
}

func (x *BlockData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *BlockData) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *BlockData) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *BlockData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockData) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *BlockData) GetQc() *QuorumCert {
	if x != nil {
		return x.Qc
	}
	return nil
}

type Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch to establish valid configuration
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Root round number
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// Highest quorum certificate of the validator
	HighQc *QuorumCert `protobuf:"bytes,3,opt,name=high_qc,json=highQc,proto3" json:"high_qc,omitempty"`
}

func (x *Timeout) Reset() {
	*x = Timeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeout) ProtoMessage() {}

func (x *Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeout.ProtoReflect.Descriptor instead.
func (*Timeout) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{4}
}

func (x *Timeout) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Timeout) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Timeout) GetHighQc() *QuorumCert {
	if x != nil {
		return x.HighQc
	}
	return nil
}

type TimeoutVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// round from timeout.high_qc.voteInfo.round
	HqcRound uint64 `protobuf:"varint,1,opt,name=hqc_round,json=hqcRound,proto3" json:"hqc_round,omitempty"`
	// timeout signature is TimeoutMsg signature - round, epoch, hqc_round, author
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TimeoutVote) Reset() {
	*x = TimeoutVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutVote) ProtoMessage() {}

func (x *TimeoutVote) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutVote.ProtoReflect.Descriptor instead.
func (*TimeoutVote) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{5}
}

func (x *TimeoutVote) GetHqcRound() uint64 {
	if x != nil {
		return x.HqcRound
	}
	return 0
}

func (x *TimeoutVote) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TimeoutCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Round and epoch of the timeout event
	Timeout *Timeout `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// 2f+1 signatures from nodes confirming TC
	Signatures map[string]*TimeoutVote `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimeoutCert) Reset() {
	*x = TimeoutCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutCert) ProtoMessage() {}

func (x *TimeoutCert) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutCert.ProtoReflect.Descriptor instead.
func (*TimeoutCert) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{6}
}

func (x *TimeoutCert) GetTimeout() *Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *TimeoutCert) GetSignatures() map[string]*TimeoutVote {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type ProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposed change
	Block *BlockData `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// Last timeout certificate for block.round - 1 if block.qc.round != block.round - 1
	LastRoundTc *TimeoutCert `protobuf:"bytes,2,opt,name=last_round_tc,json=lastRoundTc,proto3,oneof" json:"last_round_tc,omitempty"`
	// Signature, sign(block_id)
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (x *ProposalMsg) Reset() {
	*x = ProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalMsg) ProtoMessage() {}

func (x *ProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalMsg.ProtoReflect.Descriptor instead.
func (*ProposalMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{7}
}

func (x *ProposalMsg) GetBlock() *BlockData {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ProposalMsg) GetLastRoundTc() *TimeoutCert {
	if x != nil {
		return x.LastRoundTc
	}
	return nil
}

func (x *ProposalMsg) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Message for both timeout and proposal vote
type VoteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposed block hash and resulting state hash
	VoteInfo *certificates.RootRoundInfo `protobuf:"bytes,1,opt,name=vote_info,json=voteInfo,proto3" json:"vote_info,omitempty"`
	// Commit info
	LedgerCommitInfo *certificates.CommitInfo `protobuf:"bytes,2,opt,name=ledger_commit_info,json=ledgerCommitInfo,proto3" json:"ledger_commit_info,omitempty"`
	// Sync with highest QC
	HighQc *QuorumCert `protobuf:"bytes,3,opt,name=high_qc,json=highQc,proto3" json:"high_qc,omitempty"`
	// Voter node identifier
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// Vote signature on hash of consensus info
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VoteMsg) Reset() {
	*x = VoteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteMsg) ProtoMessage() {}

func (x *VoteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteMsg.ProtoReflect.Descriptor instead.
func (*VoteMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{8}
}

func (x *VoteMsg) GetVoteInfo() *certificates.RootRoundInfo {
	if x != nil {
		return x.VoteInfo
	}
	return nil
}

func (x *VoteMsg) GetLedgerCommitInfo() *certificates.CommitInfo {
	if x != nil {
		return x.LedgerCommitInfo
	}
	return nil
}

func (x *VoteMsg) GetHighQc() *QuorumCert {
	if x != nil {
		return x.HighQc
	}
	return nil
}

func (x *VoteMsg) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *VoteMsg) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TimeoutMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout   *Timeout `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Author    string   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Signature []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TimeoutMsg) Reset() {
	*x = TimeoutMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeoutMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutMsg) ProtoMessage() {}

func (x *TimeoutMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutMsg.ProtoReflect.Descriptor instead.
func (*TimeoutMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{9}
}

func (x *TimeoutMsg) GetTimeout() *Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *TimeoutMsg) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *TimeoutMsg) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Recover state
type GetCertificates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *GetCertificates) Reset() {
	*x = GetCertificates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificates) ProtoMessage() {}

func (x *GetCertificates) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificates.ProtoReflect.Descriptor instead.
func (*GetCertificates) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{10}
}

func (x *GetCertificates) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type CertificatesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert []*certificates.UnicityCertificate `protobuf:"bytes,1,rep,name=cert,proto3" json:"cert,omitempty"`
}

func (x *CertificatesMsg) Reset() {
	*x = CertificatesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificatesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificatesMsg) ProtoMessage() {}

func (x *CertificatesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificatesMsg.ProtoReflect.Descriptor instead.
func (*CertificatesMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{11}
}

func (x *CertificatesMsg) GetCert() []*certificates.UnicityCertificate {
	if x != nil {
		return x.Cert
	}
	return nil
}

type ExecutedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *BlockData `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// block qc
	Qc       *QuorumCert `protobuf:"bytes,2,opt,name=qc,proto3,oneof" json:"qc,omitempty"`
	CommitQc *QuorumCert `protobuf:"bytes,3,opt,name=commitQc,proto3,oneof" json:"commitQc,omitempty"`
}

func (x *ExecutedBlock) Reset() {
	*x = ExecutedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutedBlock) ProtoMessage() {}

func (x *ExecutedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutedBlock.ProtoReflect.Descriptor instead.
func (*ExecutedBlock) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{12}
}

func (x *ExecutedBlock) GetBlock() *BlockData {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ExecutedBlock) GetQc() *QuorumCert {
	if x != nil {
		return x.Qc
	}
	return nil
}

func (x *ExecutedBlock) GetCommitQc() *QuorumCert {
	if x != nil {
		return x.CommitQc
	}
	return nil
}

type GetStateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *GetStateMsg) Reset() {
	*x = GetStateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateMsg) ProtoMessage() {}

func (x *GetStateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateMsg.ProtoReflect.Descriptor instead.
func (*GetStateMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{13}
}

func (x *GetStateMsg) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type StateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommittedHead *ExecutedBlock   `protobuf:"bytes,1,opt,name=committedHead,proto3" json:"committedHead,omitempty"`
	BlockNode     []*ExecutedBlock `protobuf:"bytes,2,rep,name=blockNode,proto3" json:"blockNode,omitempty"`
}

func (x *StateMsg) Reset() {
	*x = StateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_atomic_broadcast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMsg) ProtoMessage() {}

func (x *StateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_atomic_broadcast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMsg.ProtoReflect.Descriptor instead.
func (*StateMsg) Descriptor() ([]byte, []int) {
	return file_atomic_broadcast_proto_rawDescGZIP(), []int{14}
}

func (x *StateMsg) GetCommittedHead() *ExecutedBlock {
	if x != nil {
		return x.CommittedHead
	}
	return nil
}

func (x *StateMsg) GetBlockNode() []*ExecutedBlock {
	if x != nil {
		return x.BlockNode
	}
	return nil
}

var File_atomic_broadcast_proto protoreflect.FileDescriptor

var file_atomic_broadcast_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x49, 0x52, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x49, 0x52, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x0b, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x32,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x52, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39,
	0x0a, 0x12, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x02, 0x71, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x02, 0x71, 0x63, 0x22, 0x5b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a,
	0x07, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x71, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x52, 0x06, 0x68, 0x69, 0x67,
	0x68, 0x51, 0x63, 0x22, 0x48, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x71, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x71, 0x63, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xbc, 0x01,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a,
	0x4b, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x63, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x56, 0x6f, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x39, 0x0a, 0x12, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x07,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x71, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x52, 0x06, 0x68, 0x69, 0x67, 0x68,
	0x51, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x66, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0f, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x27,
	0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x55,
	0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x02, 0x71,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x02, 0x71, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x48, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x63, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x71, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x51, 0x63, 0x22,
	0x25, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x60, 0x5a, 0x5e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2d, 0x6f,
	0x72, 0x67, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x6c, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x3b, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_atomic_broadcast_proto_rawDescOnce sync.Once
	file_atomic_broadcast_proto_rawDescData = file_atomic_broadcast_proto_rawDesc
)

func file_atomic_broadcast_proto_rawDescGZIP() []byte {
	file_atomic_broadcast_proto_rawDescOnce.Do(func() {
		file_atomic_broadcast_proto_rawDescData = protoimpl.X.CompressGZIP(file_atomic_broadcast_proto_rawDescData)
	})
	return file_atomic_broadcast_proto_rawDescData
}

var file_atomic_broadcast_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_atomic_broadcast_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_atomic_broadcast_proto_goTypes = []interface{}{
	(IRChangeReqMsg_CERT_REASON)(0), // 0: IRChangeReqMsg.CERT_REASON
	(*IRChangeReqMsg)(nil),          // 1: IRChangeReqMsg
	(*Payload)(nil),                 // 2: Payload
	(*QuorumCert)(nil),              // 3: QuorumCert
	(*BlockData)(nil),               // 4: BlockData
	(*Timeout)(nil),                 // 5: Timeout
	(*TimeoutVote)(nil),             // 6: TimeoutVote
	(*TimeoutCert)(nil),             // 7: TimeoutCert
	(*ProposalMsg)(nil),             // 8: ProposalMsg
	(*VoteMsg)(nil),                 // 9: VoteMsg
	(*TimeoutMsg)(nil),              // 10: TimeoutMsg
	(*GetCertificates)(nil),         // 11: GetCertificates
	(*CertificatesMsg)(nil),         // 12: CertificatesMsg
	(*ExecutedBlock)(nil),           // 13: ExecutedBlock
	(*GetStateMsg)(nil),             // 14: GetStateMsg
	(*StateMsg)(nil),                // 15: StateMsg
	nil,                             // 16: QuorumCert.SignaturesEntry
	nil,                             // 17: TimeoutCert.SignaturesEntry
	(*certification.BlockCertificationRequest)(nil), // 18: BlockCertificationRequest
	(*certificates.RootRoundInfo)(nil),              // 19: RootRoundInfo
	(*certificates.CommitInfo)(nil),                 // 20: CommitInfo
	(*certificates.UnicityCertificate)(nil),         // 21: UnicityCertificate
}
var file_atomic_broadcast_proto_depIdxs = []int32{
	0,  // 0: IRChangeReqMsg.certReason:type_name -> IRChangeReqMsg.CERT_REASON
	18, // 1: IRChangeReqMsg.requests:type_name -> BlockCertificationRequest
	1,  // 2: Payload.requests:type_name -> IRChangeReqMsg
	19, // 3: QuorumCert.vote_info:type_name -> RootRoundInfo
	20, // 4: QuorumCert.ledger_commit_info:type_name -> CommitInfo
	16, // 5: QuorumCert.signatures:type_name -> QuorumCert.SignaturesEntry
	2,  // 6: BlockData.payload:type_name -> Payload
	3,  // 7: BlockData.qc:type_name -> QuorumCert
	3,  // 8: Timeout.high_qc:type_name -> QuorumCert
	5,  // 9: TimeoutCert.timeout:type_name -> Timeout
	17, // 10: TimeoutCert.signatures:type_name -> TimeoutCert.SignaturesEntry
	4,  // 11: ProposalMsg.block:type_name -> BlockData
	7,  // 12: ProposalMsg.last_round_tc:type_name -> TimeoutCert
	19, // 13: VoteMsg.vote_info:type_name -> RootRoundInfo
	20, // 14: VoteMsg.ledger_commit_info:type_name -> CommitInfo
	3,  // 15: VoteMsg.high_qc:type_name -> QuorumCert
	5,  // 16: TimeoutMsg.timeout:type_name -> Timeout
	21, // 17: CertificatesMsg.cert:type_name -> UnicityCertificate
	4,  // 18: ExecutedBlock.block:type_name -> BlockData
	3,  // 19: ExecutedBlock.qc:type_name -> QuorumCert
	3,  // 20: ExecutedBlock.commitQc:type_name -> QuorumCert
	13, // 21: StateMsg.committedHead:type_name -> ExecutedBlock
	13, // 22: StateMsg.blockNode:type_name -> ExecutedBlock
	6,  // 23: TimeoutCert.SignaturesEntry.value:type_name -> TimeoutVote
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_atomic_broadcast_proto_init() }
func file_atomic_broadcast_proto_init() {
	if File_atomic_broadcast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_atomic_broadcast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IRChangeReqMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeoutMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificatesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_atomic_broadcast_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_atomic_broadcast_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_atomic_broadcast_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_atomic_broadcast_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_atomic_broadcast_proto_goTypes,
		DependencyIndexes: file_atomic_broadcast_proto_depIdxs,
		EnumInfos:         file_atomic_broadcast_proto_enumTypes,
		MessageInfos:      file_atomic_broadcast_proto_msgTypes,
	}.Build()
	File_atomic_broadcast_proto = out.File
	file_atomic_broadcast_proto_rawDesc = nil
	file_atomic_broadcast_proto_goTypes = nil
	file_atomic_broadcast_proto_depIdxs = nil
}
